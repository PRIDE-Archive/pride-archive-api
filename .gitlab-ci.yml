variables:
  MAVEN_CLI_OPTS: "-s .m2/settings.xml --batch-mode"
  MAVEN_OPTS: "-Dmaven.repo.local=.m2/repository"
  PRIDE_CONFIG_MAP: pride-api-configmap-$CI_PIPELINE_IID
  FILEBEAT_CONFIG_MAP: filebeat-config-$CI_PIPELINE_IID
  DOCKER_PULL_SECRET: pride-gitlab-docker-secret
  IMAGE: $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_SLUG:$CI_COMMIT_SHA

#include:
#  - template: Container-Scanning.gitlab-ci.yml
#  - template: Dependency-Scanning.gitlab-ci.yml
#  - template: License-Management.gitlab-ci.yml

docker_build:
  image: docker:18.09
  stage: build
  services:
    - docker:18.09-dind
  script:
    - apk add --update bash gettext tzdata coreutils
    - docker info
    - envsubst < config/.application.yml > config/application.yml
    - docker build -t $IMAGE .
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker push $IMAGE

kube_deploy_test:
  environment: test-env
  extends: .kube_deploy_script

kube_deploy_prod_hh:
  environment: prod-hh
  variables:
    NAMESPACE: pride-api-prod
  extends: .kube_deploy_script

kube_deploy_prod_hx:
  environment: prod-hx
  variables:
    NAMESPACE: pride-api-prod
  extends: .kube_deploy_script

.kube_deploy_script:
  stage: deploy
  image: dtzar/helm-kubectl
  script:
    - apk add --update bash gettext tzdata coreutils
    - export HOSTNAME_BCKUP=$HOSTNAME && export HOSTNAME='${HOSTNAME}'
    - envsubst < config/.application.yml > config/application.yml
    - envsubst < .filebeat.yml > filebeat.yml
    - export HOSTNAME=$HOSTNAME_BCKUP
    - mkdir -p ~/.kube
    - echo $KUBE_CONFIG > kubeconfig
    - base64 -d kubeconfig > ~/.kube/config
    - kubectl config get-contexts
    - kubectl create namespace $NAMESPACE || true
    - kubectl -n $NAMESPACE delete secret $DOCKER_PULL_SECRET || true
    - kubectl -n $NAMESPACE create secret docker-registry $DOCKER_PULL_SECRET --docker-server=$CI_REGISTRY --docker-username=$CI_DEPLOY_USER --docker-password=$CI_DEPLOY_PASSWORD
# create configmap for first time
    - kubectl -n $NAMESPACE create configmap $PRIDE_CONFIG_MAP --from-file=config/application.yml || true
# replace configmap if it already exists
    - kubectl -n $NAMESPACE create configmap $PRIDE_CONFIG_MAP --from-file=config/application.yml -o yaml --dry-run | kubectl replace -f -
# create configmap for first time
    - kubectl -n $NAMESPACE create configmap $FILEBEAT_CONFIG_MAP --from-file=filebeat.yml || true
# replace configmap if it already exists
    - kubectl -n $NAMESPACE create configmap $FILEBEAT_CONFIG_MAP --from-file=filebeat.yml -o yaml --dry-run | kubectl replace -f -
    - envsubst < .kubernetes.yml > kubernetes.yml
    - cat kubernetes.yml
    - kubectl -n $NAMESPACE apply -f kubernetes.yml
  when: manual

.deploy_script:
  stage: deploy
  image: maven:3.3.9-jdk-8-alpine
  script:
    - apk add --update openssh-client bash openssl rsync gettext tzdata
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null
    - mkdir ~/.ssh
    - chmod 700 ~/.ssh
    - DEPLOY_SERVERS_ARRAY=(`echo $DEPLOY_SERVER | tr ',' ' '`)
    - for i in "${DEPLOY_SERVERS_ARRAY[@]}"; do ssh-keyscan $i >> ~/.ssh/known_hosts; chmod 600 ~/.ssh/known_hosts; done
    - export HOSTNAME_BCKUP=$HOSTNAME && export HOSTNAME='${HOSTNAME}'
    - envsubst < config/.application.yml > config/application.yml
    - chmod -R 700 config
    - (rm src/main/resources/application.properties || true)
    - export HOSTNAME=$HOSTNAME_BCKUP
    - mvn $MAVEN_CLI_OPTS clean package
    - cd target && jar_file=`ls *jar` && (ln -s $jar_file $JAR_FILE_LINK || true) && ls -al && cd ..
    - DEPLOY_DIR=$(date +"%Y%m%d_%H%M%S")
    - DEPLOY_SERVERS_ARRAY=(`echo $DEPLOY_SERVER | tr ',' ' '`)
    - ssh $SERVER_USER@${DEPLOY_SERVERS_ARRAY[0]} "bash && cd $DEPLOY_PATH && mkdir $DEPLOY_DIR"
    - rsync -a target/*jar config $SERVER_USER@${DEPLOY_SERVERS_ARRAY[0]}:$DEPLOY_PATH/$DEPLOY_DIR/
    - ssh $SERVER_USER@${DEPLOY_SERVERS_ARRAY[0]} "bash && cd $DEPLOY_PATH && ln -snf $DEPLOY_DIR current"
    - for i in "${DEPLOY_SERVERS_ARRAY[@]}"; do ssh $SERVER_USER@$i "bash && cd $DEPLOY_PATH && (sh $STOP_SCRIPT || true) && (sh $START_SCRIPT > /dev/null 2>&1 &) && exit"; sleep 2m; done
    #  only:
    ##    - master

deploy_prod:
  environment: prod
  extends: .deploy_script
  #  only:
  #    - master
  when: manual

deploy_dev:
  environment: dev
  extends: .deploy_script
  #  only:
  #    - master
  when: manual